#!/usr/local/bin/python2.7
# encoding: utf-8
'''
Description: Calculates pairwise foldchange from deseq-normalized tables

Classes and methods:

@author:     jakeyeung

@lab:  2014 Laboratory for Advanced Genome Analysis.

@license:    Apache License 2.0

@contact:    jakeyeung@gmail
        :    github.com/jakeyeung
@deffield    updated: None yet
'''

import sys
import os
import csv
import math

from optparse import OptionParser

from scipy import stats
import numpy as np
np.seterr(divide='ignore', invalid='ignore')

__all__ = []
__version__ = 0.1
__date__ = 'May 22 2014'
__updated__ = ''

DEBUG = 0
TESTRUN = 0
PROFILE = 0

def main(argv=None):
    '''Command line options.'''

    program_name = os.path.basename(sys.argv[0])
    program_version = "v0.1"
    program_build_date = "%s" % __updated__

    program_version_string = '%%prog %s (%s)' % (program_version, program_build_date)
    #program_usage = '''usage: spam two eggs''' # optional - will be autogenerated by optparse
    program_longdesc = '''''' # optional - give further explanation about what the program does
    program_license = "Copyright 2014 Jake Yeung (Laboratory for Advanced Genome Analysis)                                            \
                Licensed under the Apache License 2.0\nhttp://www.apache.org/licenses/LICENSE-2.0"

    if argv is None:
        argv = sys.argv[1:]

    # setup option parser
    parser = OptionParser(version=program_version_string, epilog=program_longdesc, description=program_license)
    parser.add_option("-i", "--in", dest="infile", help="set input path, deseq-normalized count table [default: %default]", metavar="FILE")
    parser.add_option("-o", "--out", dest="outfile", help="set output path [default: %default]", metavar="FILE")
    parser.add_option("-v", "--verbose", dest="verbose", action="count", help="set verbosity level [default: %default]")
    parser.add_option("-s", "--sample_pairs_file", dest="samp_pairs_file", help="set sample pairs file path,", metavar="FILE")
    # set defaults
    parser.set_defaults(outfile="./out.txt", infile="./in.txt", samp_pairs_file="./mysamps.txt")

    # process options
    (opts, args) = parser.parse_args(argv)

    if opts.verbose > 0:
        print("verbosity level = %d" % opts.verbose)
    if opts.infile:
        print("infile = %s" % opts.infile)
    if opts.outfile:
        print("outfile = %s" % opts.outfile)
    if opts.samp_pairs_file:
        print("samp_pairs_file = %s" % opts.samp_pairs_file)
    # MAIN BODY #
    #read pairs of samples from textfile
    samp_pairs = []
    with open(opts.samp_pairs_file, 'rb') as samp_pairs_file:
        samp_reader = csv.reader(samp_pairs_file, delimiter='\t')
        for row in samp_reader:
            #create tuples: if matched tumour-bening
            #expect first column to be tumour sample
            #second column to be benign sample.
            if len(row[1]) == 0:
                continue    #empty samples may mean unpaired samples
            samp_pairs.append((row[0], row[1]))
    #init output file
    outfile = open(opts.outfile, 'wb')
    outwriter = csv.writer(outfile, delimiter='\t')

    '''
    #write header: first column miRNA id, other columns are sample pairs
    writeheader = ['id']    # first col
    for samp_pair in samp_pairs:
        writeheader.append("%s:%s" %samp_pair)  #tumour:benign
    outwriter.writerow(writeheader)
    '''

    #read deseq file, iterate through each row (miRNA) and calculate fold change
    with open(opts.infile) as deseqfile:
        deseqreader = csv.reader(deseqfile, delimiter='\t')
        header = deseqreader.next()
        #write header to output, add ttest pvalue at end
        outheader = header
        for outhead in ['pval', 'avg_pairwise_log2_fc']:
            outheader.append(outhead)
        outwriter.writerow(outheader)
        for rowcount, row in enumerate(deseqreader):
            #for each mirna row, calculate fold change for each sample pair
            log_tumour_reads = []
            log_benign_reads = []
            for samp_pair in samp_pairs:
                tumour_samp = samp_pair[0]
                benign_samp = samp_pair[1]
                tumour_read = float(row[header.index(tumour_samp)])
                benign_read = float(row[header.index(benign_samp)])
                #convert to log, add +1 to prevent domain errors
                #use log2 scale, it seems to be all the rage
                log_tumour_reads.append(math.log(tumour_read+1, 2))
                log_benign_reads.append(math.log(benign_read+1, 2))
            #calculate pvalue
            _, ttest_pval = stats.ttest_rel(log_benign_reads, log_tumour_reads)
            #calculate avg pair-wise fold change
            pairwise_fc = [(t - n) for t, n in zip(log_tumour_reads, log_benign_reads)]
            pairwise_fc_avg = sum(pairwise_fc) / float(len(pairwise_fc))
            #writerow to output
            writerow = row
            for val in [ttest_pval, pairwise_fc_avg]:
                row.append(val)
            outwriter.writerow(writerow)

    if opts.verbose > 0:
        print '%s rows written to: %s' %(rowcount, opts.outfile)

    outfile.close()


if __name__ == "__main__":
    if DEBUG:
        sys.argv.append("-h")
    if TESTRUN:
        import doctest
        doctest.testmod()
    if PROFILE:
        import cProfile
        import pstats
        profile_filename = 'profile.txt'
        cProfile.run('main()', profile_filename)
        statsfile = open("profile_stats.txt", "wb")
        p = pstats.Stats(profile_filename, stream=statsfile)
        stats = p.strip_dirs().sort_stats('cumulative')
        stats.print_stats()
        statsfile.close()
        sys.exit(0)
    sys.exit(main())
