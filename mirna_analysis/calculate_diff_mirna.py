#!/usr/local/bin/python2.7
# encoding: utf-8
'''
Description:

Classes and methods:

@author:     jakeyeung

@lab:  2014 Laboratory for Advanced Genome Analysis.

@license:    Apache License 2.0

@contact:    jakeyeung@gmail
        :    github.com/jakeyeung
@deffield    updated: None yet
'''

import sys
import os
import csv

from optparse import OptionParser

from utils import AnnotatedReads, list_utils

__all__ = []
__version__ = 0.1
__date__ = 'May 20 2014'
__updated__ = 'May 22 2014'

DEBUG = 0
TESTRUN = 0
PROFILE = 0

def main(argv=None):
    '''Command line options.'''

    program_name = os.path.basename(sys.argv[0])
    program_version = "v0.1"
    program_build_date = "%s" % __updated__

    program_version_string = '%%prog %s (%s)' % (program_version, program_build_date)
    #program_usage = '''usage: spam two eggs''' # optional - will be autogenerated by optparse
    program_longdesc = '''''' # optional - give further explanation about what the program does
    program_license = "Copyright 2014 Jake Yeung (Laboratory for Advanced Genome Analysis)                                            \
                Licensed under the Apache License 2.0\nhttp://www.apache.org/licenses/LICENSE-2.0"

    if argv is None:
        argv = sys.argv[1:]

    # setup option parser
    parser = OptionParser(version=program_version_string, epilog=program_longdesc, description=program_license)
    parser.add_option("-t", "--tumour", dest="tumourfile", help="set input path for tumour [default: %default]", metavar="FILE")
    parser.add_option("-b", "--benign", dest="benignfile", help="set input path for benign [default: %default]", metavar="FILE")
    parser.add_option("-o", "--out", dest="outfile", help="set output path [default: %default]", metavar="FILE")
    parser.add_option("-v", "--verbose", dest="verbose", action="count", help="set verbosity level [default: %default]")
    parser.add_option("-r", "--reads_id", dest="reads_id", help="Extract raw reads or normalized reads (TPM)", metavar="TPM | reads")
    # set defaults
    parser.set_defaults(outfile="./out.txt", infile="./in.txt", reads_id="reads")

    # process options
    (opts, args) = parser.parse_args(argv)

    if opts.verbose > 0:
        print("verbosity level = %d" % opts.verbose)
    if opts.infile:
        print("tumourfile = %s" % opts.tumourfile)
    if opts.outfile:
        print("benignfile = %s" % opts.benignfile)
    if opts.outfile:
        print("outfile = %s" % opts.outfile)
    if opts.reads_id:
        print("reads_id = %s" % opts.reads_id)

    # MAIN BODY #
    tumour_annotatedreads = AnnotatedReads.AnnotatedReads(opts.tumourfile)
    benign_annotatedreads = AnnotatedReads.AnnotatedReads(opts.benignfile)

    benign_dic = AnnotatedReads.index_annotatedreads_file(benign_annotatedreads, count_id=opts.reads_id)
    tumour_dic = AnnotatedReads.index_annotatedreads_file(tumour_annotatedreads, count_id=opts.reads_id)

    '''
    for annot in benign_dic:
        print benign_dic[annot]
        raw_input()
    '''
    #init outfile
    outfile = open(opts.outfile, 'wb')
    outwriter = csv.writer(outfile, delimiter='\t')
    '''
    # write header containing:
    [mirna(annotations), annotatedreads_benign, annotatedreads_tumour, fold_change,
    locations_benign,
    locations_benign_annotatedreadss, locations_tumour, locations_tumour_annotatedreadss]
    '''
    writeheader = ['mirna',
                   '%s_benign_sum' %opts.reads_id,
                   '%s_tumour_sum' %opts.reads_id,
                   '%s_sum_fold_change' %opts.reads_id]
    outwriter.writerow(writeheader)

    for annot in benign_dic.keys():
        try:
            tumour_annotatedreads_sum = tumour_dic[annot]['%s' %opts.reads_id]
        except KeyError:
            continue
        #calculate fold change, get locations and annotatedreadss lists
        benign_annotatedreads_sum = benign_dic[annot]['%s' %opts.reads_id]
        fold_change = float(tumour_annotatedreads_sum) / benign_annotatedreads_sum
        # write row, matching to writeheader
        writerow = [annot,
                    benign_annotatedreads_sum,
                    tumour_annotatedreads_sum,
                    fold_change]
        outwriter.writerow(writerow)
    outfile.close()

if __name__ == "__main__":
    if DEBUG:
        sys.argv.append("-h")
    if TESTRUN:
        import doctest
        doctest.testmod()
    if PROFILE:
        import cProfile
        import pstats
        profile_filename = 'profile.txt'
        cProfile.run('main()', profile_filename)
        statsfile = open("profile_stats.txt", "wb")
        p = pstats.Stats(profile_filename, stream=statsfile)
        stats = p.strip_dirs().sort_stats('cumulative')
        stats.print_stats()
        statsfile.close()
        sys.exit(0)
    sys.exit(main())
